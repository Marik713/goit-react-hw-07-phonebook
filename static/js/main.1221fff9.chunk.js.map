{"version":3,"sources":["components/App/ContactForm/ContactForm.module.css","components/App/ContactList/ContactListItem/ContactListItem.module.css","components/App/Filter/Filter.module.css","components/App/ContactList/ContactList.module.css","transitions/contact.module.css","components/App/Loader/Loader.module.css","transitions/title.module.css","transitions/filter.module.css","redux/contacts/contactsActions.js","redux/contacts/contactsOperations.js","redux/contacts/contactsSelectors.js","components/App/ContactList/ContactListItem/ContactListItem.js","components/App/ContactList/ContactList.jsx","components/App/Filter/Filter.js","components/App/Loader/Loader.jsx","components/App/ContactForm/ContactForm.js","components/App/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","changeFilter","axios","defaults","baseURL","addContact","task","dispatch","contactsActions","post","then","data","catch","error","fetchContacts","get","removeContact","id","delete","getContacts","state","tasks","items","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","contacts","contact","name","toLowerCase","includes","getContactById","contactId","find","connect","ownProps","contactsSelectors","onRemove","contactsOperations","number","className","styles","ContactList_item","contactWrapper","numberContact","ContactList_button","type","onClick","TransitionGroup","component","ContactList","map","CSSTransition","timeout","unmountOnExit","classNames","contactTransition","mapDispatchToProps","onChangeFilter","value","filterContainer","title","filterEditor_input","onChange","e","target","Loader","loader","color","height","width","ContactForm","handleChange","setState","handleSubmit","preventDefault","props","onAddContact","FormEditor","onSubmit","this","FormEditor_label","FormEditor_input","required","mask","FormEditor_button","Component","defaultProps","App","onFetchContacts","in","titleTransition","appear","filterTransition","isLoadingContacts","createReducer","action","payload","fetchContactRequest","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,WAAa,gCAAgC,iBAAmB,sCAAsC,iBAAmB,sCAAsC,kBAAoB,yC,mBCArMD,EAAOC,QAAU,CAAC,iBAAmB,0CAA0C,mBAAqB,4CAA4C,cAAgB,uCAAuC,eAAiB,0C,mBCAxND,EAAOC,QAAU,CAAC,mBAAqB,mCAAmC,gBAAkB,gCAAgC,MAAQ,wB,mBCApID,EAAOC,QAAU,CAAC,YAAc,mC,mBCAhCD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,YAAc,6BAA6B,KAAO,sBAAsB,WAAa,8B,mBCAtID,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,OAAS,sBAAsB,WAAa,4B,mBCA9DD,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,YAAc,4BAA4B,KAAO,qBAAqB,WAAa,6B,+LCC7HC,EAAoBC,YAAa,uBACjCC,EAAoBD,YAAa,uBACjCE,EAAkBF,YAAa,qBAE/BG,EAAuBH,YAAa,0BACpCI,EAAuBJ,YAAa,0BACpCK,EAAqBL,YAAa,wBAQzB,GACbD,oBACAE,oBACAC,kBACAI,qBAV2BN,YAAa,yBAWxCO,qBAV2BP,YAAa,yBAWxCQ,mBAVyBR,YAAa,uBAWtCG,uBACAC,uBACAC,qBACAI,aAZmBT,YAAa,0BCXlCU,IAAMC,SAASC,QAAU,wBAEzB,IAwBe,GAAEC,WAxBE,SAACC,GAAD,OAAU,SAACC,GAC5BA,EAASC,EAAgBjB,qBACzBW,IACGO,KAAK,YAAaH,GAClBI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAASC,EAAgBf,kBAAkBkB,OAC9DC,OAAM,SAACC,GAAD,OAAWN,EAASC,EAAgBd,gBAAgBmB,SAmBlCC,cAhBP,kBAAM,SAACP,GAC3BA,EAASC,EAAgBV,wBACzBI,IACGa,IAAI,aACJL,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAASC,EAAgBT,qBAAqBY,OACjEC,OAAM,SAACC,GAAD,OAAWN,EAASC,EAAgBR,2BAWHgB,cARtB,SAACC,GAAD,OAAQ,SAACV,GAC7BA,EAASC,EAAgBb,wBACzBO,IACGgB,OADH,oBACuBD,IACpBP,MAAK,kBAAMH,EAASC,EAAgBZ,qBAAqBqB,OACzDL,OAAM,SAACC,GAAD,OAAWN,EAASC,EAAgBX,mBAAmBgB,U,yBCxB5DM,EAAc,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAIrCC,EAAY,SAACH,GAAD,OAAWA,EAAMC,MAAMG,QAgB1B,GAAEC,WAlBE,SAACL,GAAD,OAAWA,EAAMC,MAAMK,SAkBbH,YAAWI,mBAdbC,YACzB,CAACT,EAAaI,IACd,SAACM,EAAUL,GACT,OAAOK,EAASL,QAAO,SAACM,GAAD,OACrBA,EAAQC,KAAKC,cAAcC,SAAST,EAAOQ,qBAUWE,eALrCN,YACrB,CAAC,SAACR,EAAOe,GAAR,OAAsBA,GAAWhB,IAClC,SAACgB,EAAWN,GAAZ,OAAyBA,EAASO,MAAK,SAACN,GAAD,OAAaA,EAAQb,KAAOkB,SCiBtDE,eAXE,SAACjB,EAAOkB,GACvB,IAAMR,EAAUS,EAAkBL,eAAed,EAAOkB,EAASrB,IACjE,OAAO,eACFa,MAIoB,SAACvB,EAAU+B,GAAX,MAAyB,CAClDE,SAAU,kBAAMjC,EAASkC,EAAmBzB,cAAcsB,EAASrB,SAGtDoB,EA9BS,SAAC,GAAD,IAAGN,EAAH,EAAGA,KAAMW,EAAT,EAASA,OAAQF,EAAjB,EAAiBA,SAAjB,OACtB,qBAAIG,UAAWC,IAAOC,iBAAtB,UACE,sBAAKF,UAAWC,IAAOE,eAAvB,UACE,4BAAIf,IACJ,mBAAGY,UAAWC,IAAOG,cAArB,SAAqCL,OAGrC,wBACEC,UAAWC,IAAOI,mBAClBC,KAAK,SACLlB,KAAK,SACLmB,QAASV,EAJX,0B,yBC0BSH,eAJS,SAACjB,GAAD,MAAY,CAClCS,SAAUU,EAAkBZ,mBAAmBP,MAGlCiB,EA9BK,SAAC,GAAD,IAAGR,EAAH,EAAGA,SAAH,OAClB,cAACsB,EAAA,EAAD,CAAiBC,UAAU,KAAKT,UAAWC,IAAOS,YAAlD,SACGxB,EAASyB,KAAI,gBAAGrC,EAAH,EAAGA,GAAH,OACZ,cAACsC,EAAA,EAAD,CAEEC,QAAS,IACTC,eAAa,EACbC,WAAYC,IAJd,SAME,cAAC,EAAD,CAA0B1C,GAAIA,GAARA,IALjBA,W,iBCiBP2C,EAAqB,CACzBC,eAAgBrD,EAAgBP,cAGnBoC,eARS,SAACjB,GAAD,MAAY,CAClC0C,MAAOvB,EAAkBhB,UAAUH,MAOGwC,EAAzBvB,EA3BA,SAAC,GAA+B,IAA7ByB,EAA4B,EAA5BA,MAAOD,EAAqB,EAArBA,eACvB,OACE,sBAAKlB,UAAWC,IAAOmB,gBAAvB,UACE,oBAAIpB,UAAWC,IAAOoB,MAAtB,mCACA,uBACErB,UAAWC,IAAOqB,mBAClBhB,KAAK,OACLa,MAAOA,EACPI,SAAU,SAACC,GAAD,OAAON,EAAeM,EAAEC,OAAON,gB,kCCClCO,EAZA,kBACb,qBAAK1B,UAAWC,IAAO0B,OAAvB,SACE,cAAC,IAAD,CACErB,KAAK,YACLsB,MAAM,OACNC,OAAQ,IACRC,MAAO,IACPjB,QAAS,S,yCCJTkB,E,4MACJtD,MAAQ,CACNW,KAAM,GACNW,OAAQ,I,EAGViC,aAAe,SAACR,GAAO,IAAD,EACIA,EAAEC,OAAlBrC,EADY,EACZA,KAAM+B,EADM,EACNA,MACd,EAAKc,SAAL,eACG7C,EAAO+B,K,EAIZe,aAAe,SAACV,GACdA,EAAEW,iBACF,EAAKC,MAAMC,aAAX,eAA6B,EAAK5D,QAClC,EAAKwD,SAAS,CAAE7C,KAAM,GAAIW,OAAQ,M,uDAIlC,OACE,uBAAMC,UAAWC,IAAOqC,WAAYC,SAAUC,KAAKN,aAAnD,UACE,wBAAOlC,UAAWC,IAAOwC,iBAAzB,iBAEE,uBACEzC,UAAWC,IAAOyC,iBAClBpC,KAAK,OACLlB,KAAK,OACL+B,MAAOqB,KAAK/D,MAAMW,KAClBmC,SAAUiB,KAAKR,kBAGnB,wBAAOhC,UAAWC,IAAOwC,iBAAzB,mBAEE,cAAC,IAAD,CACEzC,UAAWC,IAAOyC,iBAClBpC,KAAK,OACLlB,KAAK,SACL+B,MAAOqB,KAAK/D,MAAMsB,OAClB4C,UAAQ,EACRC,KAAK,YACLrB,SAAUiB,KAAKR,kBAGnB,wBAAQhC,UAAWC,IAAO4C,kBAAmBvC,KAAK,SAAlD,gC,GA5CkBwC,aAoDpB7B,EAAqB,CACzBoB,aAAcvC,EAAmBpC,YAGpBgC,eAAQ,KAAMuB,EAAdvB,CAAkCqC,GAEjDA,EAAYgB,aAAe,CACzB3D,KAAM,GACNW,OAAQ,I,kDCvDJiD,G,kLAEFR,KAAKJ,MAAMa,oB,+BAIX,OACE,sBAAKjD,UAAU,gBAAf,UACE,cAACY,EAAA,EAAD,CACEsC,IAAI,EACJrC,QAAS,IACTE,WAAYoC,KACZC,QAAQ,EAJV,SAME,oBAAIpD,UAAU,YAAd,yBAGF,cAAC,GAAD,IAEA,cAACY,EAAA,EAAD,CACEsC,IAAI,EACJrC,QAAS,IACTC,eAAa,EACbC,WAAYsC,KAJd,SAME,cAAC,EAAD,MAEDb,KAAKJ,MAAMkB,mBAAqB,cAAC,EAAD,IACjC,cAAC,EAAD,W,GA5BUR,aAsCZ7B,GAAqB,CACzBgC,gBAAiBnD,EAAmB3B,eAGvBuB,gBARS,SAACjB,GAAD,MAAY,CAClC6E,kBAAmB1D,EAAkBd,WAAWL,MAOVwC,GAAzBvB,CAA6CsD,I,iBC7CtDrE,GAAQ4E,YAAc,IAAD,qBACxB1F,EAAgBT,sBAAuB,SAACqB,EAAO+E,GAAR,OAAmBA,EAAOC,WADzC,eAExB5F,EAAgBf,mBAPA,SAAC2B,EAAO+E,GAAR,OAAoBA,EAAOC,SAA3B,oBAAuChF,OAK/B,eAGxBZ,EAAgBZ,sBANG,SAACwB,EAAO+E,GAAR,OACpB/E,EAAMI,QAAO,SAAClB,GAAD,OAAUA,EAAKW,KAAOkF,EAAOC,cAEjB,KAMrB5E,GAAS0E,YAAc,GAAD,eACzB1F,EAAgBP,cAAe,SAACmB,EAAD,YAAUgF,YAGtC1E,GAAUwE,aAAc,GAAD,qBAC1B1F,EAAgB6F,qBAAsB,kBAAM,KADlB,eAE1B7F,EAAgBT,sBAAuB,kBAAM,KAFnB,eAG1BS,EAAgBR,oBAAqB,kBAAM,KAHjB,eAI1BQ,EAAgBjB,mBAAoB,kBAAM,KAJhB,eAK1BiB,EAAgBf,mBAAoB,kBAAM,KALhB,eAM1Be,EAAgBd,iBAAkB,kBAAM,KANd,eAO1Bc,EAAgBb,sBAAuB,kBAAM,KAPnB,eAQ1Ba,EAAgBZ,sBAAuB,kBAAM,KARnB,eAS1BY,EAAgBX,oBAAqB,kBAAM,KATjB,KAYdyG,gBAAgB,CAC7BhF,SACAE,UACAE,aC3Ba6E,GAJDC,YAAe,CAC3BC,QAAS,CAAEpF,MAAOqF,M,MCGpBC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,cAAC,GAAD,MAEFM,SAASC,eAAe,W","file":"static/js/main.1221fff9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormEditor\":\"ContactForm_FormEditor__3zqk3\",\"FormEditor_label\":\"ContactForm_FormEditor_label__278LP\",\"FormEditor_input\":\"ContactForm_FormEditor_input__XKcim\",\"FormEditor_button\":\"ContactForm_FormEditor_button__22XsU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList_item\":\"ContactListItem_ContactList_item__2CnWz\",\"ContactList_button\":\"ContactListItem_ContactList_button__1srlO\",\"numberContact\":\"ContactListItem_numberContact__3K-1P\",\"contactWrapper\":\"ContactListItem_contactWrapper__3Cfog\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterEditor_input\":\"Filter_filterEditor_input__2mc8O\",\"filterContainer\":\"Filter_filterContainer__1fEJD\",\"title\":\"Filter_title__1irs9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__2ZwlY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"contact_enter__1rgsw\",\"enterActive\":\"contact_enterActive__2lu9B\",\"exit\":\"contact_exit__3W5t4\",\"exitActive\":\"contact_exitActive__3UfGh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__2ywMg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"title_appear__wbhlf\",\"appearDone\":\"title_appearDone__6raFY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"filter_enter__2R3w8\",\"enterActive\":\"filter_enterActive__1Ku8b\",\"exit\":\"filter_exit__1SFwA\",\"exitActive\":\"filter_exitActive__nP45_\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContactRequest = createAction(\"contacts/addRequest\");\r\nconst addContactSuccess = createAction(\"contacts/addSuccess\");\r\nconst addContactError = createAction(\"contacts/addError\");\r\n\r\nconst removeContactRequest = createAction(\"contacts/removeRequest\");\r\nconst removeContactSuccess = createAction(\"contacts/removeSuccess\");\r\nconst removeContactError = createAction(\"contacts/removeError\");\r\n\r\nconst fetchContactsRequest = createAction(\"contacts/fetchRequest\");\r\nconst fetchContactsSuccess = createAction(\"contacts/fetchSuccess\");\r\nconst fetchContactsError = createAction(\"contacts/fetchError\");\r\n\r\nconst changeFilter = createAction(\"contacts/changeFilter\");\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  changeFilter,\r\n};\r\n","import axios from \"axios\";\r\nimport contactsActions from \"./contactsActions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:2000\";\r\n\r\nconst addContact = (task) => (dispatch) => {\r\n  dispatch(contactsActions.addContactRequest());\r\n  axios\r\n    .post(\"/contacts\", task)\r\n    .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\r\n    .catch((error) => dispatch(contactsActions.addContactError(error)));\r\n};\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(contactsActions.fetchContactsSuccess(data)))\r\n    .catch((error) => dispatch(contactsActions.fetchContactsError()));\r\n};\r\n\r\nconst removeContact = (id) => (dispatch) => {\r\n  dispatch(contactsActions.removeContactRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactsActions.removeContactSuccess(id)))\r\n    .catch((error) => dispatch(contactsActions.removeContactError(error)));\r\n};\r\n\r\nexport default { addContact, fetchContacts, removeContact };\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getContacts = (state) => state.tasks.items;\r\n\r\nconst getLoading = (state) => state.tasks.loading;\r\n\r\nconst getFilter = (state) => state.tasks.filter;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  }\r\n);\r\n\r\nconst getContactById = createSelector(\r\n  [(state, contactId) => contactId, getContacts],\r\n  (contactId, contacts) => contacts.find((contact) => contact.id === contactId)\r\n);\r\n\r\nexport default { getLoading, getFilter, getVisibleContacts, getContactById };\r\n","import React from \"react\";\r\nimport contactsOperations from \"../../../../redux/contacts/contactsOperations\";\r\nimport { connect } from \"react-redux\";\r\nimport styles from \"./ContactListItem.module.css\";\r\nimport contactsSelectors from \"../../../../redux/contacts/contactsSelectors\";\r\n\r\nconst ContactListItem = ({ name, number, onRemove }) => (\r\n  <li className={styles.ContactList_item}>\r\n    <div className={styles.contactWrapper}>\r\n      <p>{name}</p>\r\n      <p className={styles.numberContact}>{number}</p>\r\n    </div>\r\n    {\r\n      <button\r\n        className={styles.ContactList_button}\r\n        type=\"button\"\r\n        name=\"delete\"\r\n        onClick={onRemove}\r\n      >\r\n        &#10006;\r\n      </button>\r\n    }\r\n  </li>\r\n);\r\n\r\nconst mapState = (state, ownProps) => {\r\n  const contact = contactsSelectors.getContactById(state, ownProps.id);\r\n  return {\r\n    ...contact,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onRemove: () => dispatch(contactsOperations.removeContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapState, mapDispatchToProps)(ContactListItem);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactList.module.css\";\r\nimport ContactListItem from \"./ContactListItem/ContactListItem\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport contactTransition from \"../../../transitions/contact.module.css\";\r\nimport contactsSelectors from \"../../../redux/contacts/contactsSelectors\";\r\n\r\nconst ContactList = ({ contacts }) => (\r\n  <TransitionGroup component=\"ul\" className={styles.ContactList}>\r\n    {contacts.map(({ id }) => (\r\n      <CSSTransition\r\n        key={id}\r\n        timeout={250}\r\n        unmountOnExit\r\n        classNames={contactTransition}\r\n      >\r\n        <ContactListItem key={id} id={id} />\r\n      </CSSTransition>\r\n    ))}\r\n  </TransitionGroup>\r\n);\r\n\r\nContactList.propTypes = {\r\n  onRemoveContact: PropTypes.func,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../../redux/contacts/contactsActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Filter.module.css\";\r\nimport contactsSelectors from \"../../../redux/contacts/contactsSelectors\";\r\n\r\nconst Filter = ({ value, onChangeFilter }) => {\r\n  return (\r\n    <div className={styles.filterContainer}>\r\n      <h3 className={styles.title}>Find contacts by name</h3>\r\n      <input\r\n        className={styles.filterEditor_input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={(e) => onChangeFilter(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onchangeFilter: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport LoaderSpinner from \"react-loader-spinner\";\r\nimport styles from \"./Loader.module.css\";\r\n\r\nconst Loader = () => (\r\n  <div className={styles.loader}>\r\n    <LoaderSpinner\r\n      type=\"ThreeDots\"\r\n      color=\"grey\"\r\n      height={100}\r\n      width={100}\r\n      timeout={3000}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport InputTelMask from \"react-input-mask\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsOperations from \"../../../redux/contacts/contactsOperations\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onAddContact({ ...this.state });\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={styles.FormEditor} onSubmit={this.handleSubmit}>\r\n        <label className={styles.FormEditor_label}>\r\n          Name\r\n          <input\r\n            className={styles.FormEditor_input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <label className={styles.FormEditor_label}>\r\n          Number\r\n          <InputTelMask\r\n            className={styles.FormEditor_input}\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            required\r\n            mask=\"999-99-99\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button className={styles.FormEditor_button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactsOperations.addContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.defaultProps = {\r\n  name: \"\",\r\n  number: \"\",\r\n};\r\n\r\nContactForm.propTypes = {\r\n  onAddContact: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport ContactList from \"./ContactList/ContactList\";\nimport Filter from \"./Filter/Filter\";\nimport Loader from \"./Loader/Loader\";\nimport ContactForm from \"./ContactForm/ContactForm\";\nimport titleTransition from \"../../transitions/title.module.css\";\nimport filterTransition from \"../../transitions/filter.module.css\";\nimport contactsOperations from \"../../redux/contacts/contactsOperations\";\nimport contactsSelectors from \"../../redux/contacts/contactsSelectors\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n\n  render() {\n    return (\n      <div className=\"mainContainer\">\n        <CSSTransition\n          in={true}\n          timeout={500}\n          classNames={titleTransition}\n          appear={true}\n        >\n          <h1 className=\"mainTitle\">Phonebook</h1>\n        </CSSTransition>\n\n        <ContactForm />\n\n        <CSSTransition\n          in={true}\n          timeout={250}\n          unmountOnExit\n          classNames={filterTransition}\n        >\n          <Filter />\n        </CSSTransition>\n        {this.props.isLoadingContacts && <Loader />}\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = {\n  onFetchContacts: contactsOperations.fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport contactsActions from \"./contactsActions\";\r\n\r\nconst addContact = (state, action) => [action.payload, ...state];\r\n\r\nconst removeContact = (state, action) =>\r\n  state.filter((task) => task.id !== action.payload);\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.fetchContactsSuccess]: (state, action) => action.payload,\r\n  [contactsActions.addContactSuccess]: addContact,\r\n  [contactsActions.removeContactSuccess]: removeContact,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [contactsActions.changeFilter]: (state, { payload }) => (state = payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsActions.fetchContactRequest]: () => true,\r\n  [contactsActions.fetchContactsSuccess]: () => false,\r\n  [contactsActions.fetchContactsError]: () => false,\r\n  [contactsActions.addContactRequest]: () => true,\r\n  [contactsActions.addContactSuccess]: () => false,\r\n  [contactsActions.addContactError]: () => false,\r\n  [contactsActions.removeContactRequest]: () => true,\r\n  [contactsActions.removeContactSuccess]: () => false,\r\n  [contactsActions.removeContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","import contactsReducer from \"./contacts/contactsReducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst store = configureStore({\r\n  reducer: { tasks: contactsReducer },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./base.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}